{"version":3,"sources":["context/SearchContext.js","containers/Toolbar.js","components/Item.js","sdk/contentful.js","containers/List.js","App.js","serviceWorker.js","index.js"],"names":["SearchContext","createContext","SearchProvider","props","useState","search","setSearch","Provider","value","children","Toolbar","useContext","console","log","type","name","id","placeholder","onChange","event","target","Item","record","artist","title","client","contentful","space","accessToken","getRecords","query","a","getEntries","then","result","items","dataTransformer","catch","err","error","data","map","item","fields","sys","List","records","setRecords","searchRecords","useCallback","content_type","fetchedRecords","useEffect","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+JAEaA,EAAgBC,0BAYdC,MAVf,SAAwBC,GAAQ,IAAD,EACDC,mBAAS,IADR,mBACtBC,EADsB,KACdC,EADc,KAG7B,OACE,kBAACN,EAAcO,SAAf,CAAwBC,MAAO,CAACH,EAAQC,IACrCH,EAAMM,WCmBEC,MAzBf,WAAoB,IAAD,EACWC,qBAAWX,GADtB,mBACVK,EADU,KACFC,EADE,KAKjB,OAFAM,QAAQC,IAAI,UAGV,6BACE,kDAEA,2BACEC,KAAK,OACLC,KAAK,GACLC,GAAG,GACHC,YAAY,YACZT,MAAOH,EACPa,SAAU,SAAAC,GAAK,OAAIb,EAAUa,EAAMC,OAAOZ,UAG5C,8BACE,gCAASH,M,wBCRFgB,MAZf,YAA2B,IAAXC,EAAU,EAAVA,OACd,OACE,6BACE,2BACGA,EAAOC,OADV,OAGGD,EAAOE,S,QCNVC,E,MAASC,EAAwB,CACrCC,MAAO,eACPC,YAAa,gDAGR,SAAeC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,SAAAC,EAAA,+EACEN,EACJO,WAAWF,GACXG,MAAK,SAAAC,GACJ,OAAOA,EAAOC,SAEfF,MAAK,SAAAE,GACJ,OAAOC,EAAgBD,MAExBE,OAAM,SAAAC,GACL1B,QAAQ2B,MAAMD,OAVb,4C,sBAcP,SAASF,EAAgBI,GACvB,OAAOA,EAAKC,KAAI,SAAAC,GACd,OAAO,2BACFA,EAAKC,QADV,IAEE3B,GAAI0B,EAAKE,IAAI5B,QCWJ6B,MA/Bf,WAAiB,IAAD,EACgBzC,mBAAS,IADzB,mBACP0C,EADO,KACEC,EADF,OAEcpC,qBAAWX,GAFzB,mBAEPK,EAFO,KAIR2C,GAJQ,KAIQC,sBAAW,sBAC/B,4BAAAlB,EAAA,sEAC+BF,EAAW,CACtCqB,aAAc,UACd,sBAAuB7C,IAH3B,OACQ8C,EADR,OAMEvC,QAAQC,IAAIsC,GAEZJ,EAAWI,GARb,2CAUA,CAAC9C,KAOH,OAJA+C,qBAAU,WACRJ,MACC,CAACA,IAGF,6BACGF,EAAQL,KAAI,SAAAnB,GACX,OAAO,kBAAC,EAAD,CAAMA,OAAQA,EAAQ+B,IAAK/B,EAAON,UCdlCsC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAE,GACL3B,QAAQ2B,MAAMA,EAAM+B,a","file":"static/js/main.df9cc9a8.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\nexport const SearchContext = createContext();\n\nfunction SearchProvider(props) {\n  const [search, setSearch] = useState('');\n\n  return (\n    <SearchContext.Provider value={[search, setSearch]}>\n      {props.children}\n    </SearchContext.Provider>\n  );\n}\n\nexport default SearchProvider;\n","import React, { useState, useContext } from 'react';\nimport { SearchContext } from '../context/SearchContext';\n\nfunction Toolbar() {\n  const [search, setSearch] = useContext(SearchContext);\n\n  console.log('Render');\n\n  return (\n    <div>\n      <span>Itca Fepade 2020</span>\n\n      <input\n        type=\"text\"\n        name=\"\"\n        id=\"\"\n        placeholder=\"Search...\"\n        value={search}\n        onChange={event => setSearch(event.target.value)}\n      />\n\n      <span>\n        <strong>{search}</strong>\n      </span>\n    </div>\n  );\n}\n\nexport default Toolbar;\n","import React from 'react';\n\nfunction Item({ record }) {\n  return (\n    <div>\n      <p>\n        {record.artist}\n        {` -- `}\n        {record.title}\n      </p>\n    </div>\n  );\n}\n\nexport default Item;\n","import * as contentful from 'contentful';\n\nconst client = contentful.createClient({\n  space: 'srlpekq85luo',\n  accessToken: 'evMFF1eK--2PX6Qqrlq8glrKOurVH1pdvaI-FRgmufU',\n});\n\nexport async function getRecords(query) {\n  return client\n    .getEntries(query)\n    .then(result => {\n      return result.items;\n    })\n    .then(items => {\n      return dataTransformer(items);\n    })\n    .catch(err => {\n      console.error(err);\n    });\n}\n\nfunction dataTransformer(data) {\n  return data.map(item => {\n    return {\n      ...item.fields,\n      id: item.sys.id,\n    };\n  });\n}\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport Item from '../components/Item';\nimport { getRecords } from '../sdk/contentful';\nimport { SearchContext } from '../context/SearchContext';\n\nfunction List() {\n  const [records, setRecords] = useState([]);\n  const [search, setSearch] = useContext(SearchContext);\n\n  const searchRecords = useCallback(\n    async function () {\n      const fetchedRecords = await getRecords({\n        content_type: 'records',\n        'fields.title[match]': search,\n      });\n\n      console.log(fetchedRecords);\n\n      setRecords(fetchedRecords); //Sic Mundus Creatus Est\n    },\n    [search]\n  );\n\n  useEffect(() => {\n    searchRecords();\n  }, [searchRecords]);\n\n  return (\n    <div>\n      {records.map(record => {\n        return <Item record={record} key={record.id} />;\n      })}\n    </div>\n  );\n}\n\nexport default List;\n","import React from 'react';\nimport Toolbar from './containers/Toolbar';\nimport List from './containers/List';\nimport SearchProvider from './context/SearchContext';\n\nfunction App() {\n  return (\n    <div>\n      <SearchProvider>\n        <Toolbar />\n        <List />\n      </SearchProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}